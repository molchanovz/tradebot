// Code generated by mfd-generator v0.4.6-0.20250630100057-9aef707b63d9; DO NOT EDIT.

//nolint:all
//lint:file-ignore U1000 ignore unused code, it's generated
package db

import (
	"unicode/utf8"
)

const (
	ErrEmptyValue = "empty"
	ErrMaxLength  = "len"
	ErrWrongValue = "value"
)

func (c Cabinet) Validate() (errors map[string]string, valid bool) {
	errors = map[string]string{}

	if utf8.RuneCountInString(c.Name) > 64 {
		errors[Columns.Cabinet.Name] = ErrMaxLength
	}

	if c.ClientID != nil && utf8.RuneCountInString(*c.ClientID) > 64 {
		errors[Columns.Cabinet.ClientID] = ErrMaxLength
	}

	if utf8.RuneCountInString(c.Key) > 1024 {
		errors[Columns.Cabinet.Key] = ErrMaxLength
	}

	if c.SheetLink != nil && utf8.RuneCountInString(*c.SheetLink) > 1024 {
		errors[Columns.Cabinet.SheetLink] = ErrMaxLength
	}

	return errors, len(errors) == 0
}

func (o Order) Validate() (errors map[string]string, valid bool) {
	errors = map[string]string{}

	if utf8.RuneCountInString(o.PostingNumber) > 32 {
		errors[Columns.Order.PostingNumber] = ErrMaxLength
	}

	if utf8.RuneCountInString(o.Article) > 128 {
		errors[Columns.Order.Article] = ErrMaxLength
	}

	return errors, len(errors) == 0
}

func (s Stock) Validate() (errors map[string]string, valid bool) {
	errors = map[string]string{}

	if utf8.RuneCountInString(s.Article) > 64 {
		errors[Columns.Stock.Article] = ErrMaxLength
	}

	return errors, len(errors) == 0
}

func (u User) Validate() (errors map[string]string, valid bool) {
	errors = map[string]string{}

	if u.CabinetIDs == nil {
		errors[Columns.User.CabinetIDs] = ErrEmptyValue
	}

	return errors, len(errors) == 0
}
